{"version":3,"sources":["registerServiceWorker.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Header","nextProps","nextState","className","Component","Card","name","email","id","src","alt","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","hasError","info","this","setState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","e","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.336240b4.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className='f1'>Robofriends</h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => (\n  <div>\n    {robots.map((robot, i) => (\n      <Card\n        key={robot.id}\n        id={robot.id}\n        name={robot.name}\n        email={robot.email}\n      />\n    ))}\n  </div>\n);\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => (\n  <div className='pa2'>\n    <input\n      className='pa3 ba b--green bg-lightest-blue'\n      type='search'\n      placeholder='search robots'\n      onChange={searchChange}\n    />\n  </div>\n);\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = props => (\n  <div\n    style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}\n  >\n    {props.children}\n  </div>\n);\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>An error has occurred</h1>;\n    }\n    return this.props.children;\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: e => dispatch(setSearchField(e.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n});\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n\n    const filteredRobots = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {isPending ? (\n            <h1>Loading</h1>\n          ) : (\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const requestRobots = (state = initialStateRobots, action) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}